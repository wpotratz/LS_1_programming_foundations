q1: See if there is an age present for 'Spot':
ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 402, "Eddie" => 10 }

a1: 
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 402, "Eddie" => 10 }
  
  ages.select { |name, age| name == 'Spot' && a.class.ancestors.include?(Numeric) }
  ages.key?("Spot")
  ages.include?('Spot')
  ages.member?('Spot')

q2: Add up all of the ages from our current Munster family hash:
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10, "Marilyn" => 22, "Spot" => 237 }

a2: 
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10, "Marilyn" => 22, "Spot" => 237 }
  ages.values.reduce(:+)

q3: Remove people 100 years or older from:
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10, "Marilyn" => 22, "Spot" => 237 }

a3:
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10, "Marilyn" => 22, "Spot" => 237 }
  ages.keep_if { |_, age| age < 100 }
  
q4: Conver the following ways:
  munsters_description = "The Munsters are creepy in a good way."
  
  "The munsters are creepy in a good way."
  "tHE mUNSTERS ARE CREEPY IN A GOOD WAY."
  "the munsters are creepy in a good way."
  "THE MUNSTERS ARE CREEPY IN A GOOD WAY."

a4:
  munsters_description = "The Munsters are creepy in a good way."
  
  munsters_description.capitalize
  munsters_description.swapcase
  munsters_description.downcase
  munsters_description.upcase
  
q5: Add ages for additional_ages = { "Marilyn" => 22, "Spot" => 237 } to:
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10 }
  
a5:
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10 }
  additional_ages = { "Marilyn" => 22, "Spot" => 237 }
  
  additional_ages.each { |name, age|  ages[name] = age }
  OR
  ages.merge!(additional_ages)

q6: pick out the minimum age from:
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10, "Marilyn" => 22, "Spot" => 237 }

a6: 
  ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10, "Marilyn" => 22, "Spot" => 237 }
  ages.values.sort.first
  OR
  ages.values.min
  
q7: See if the name "Dino" appears in:
  advice = "Few things in life are as important as house training your pet dinosaur."
  
a7:
  advice = "Few things in life are as important as house training your pet dinosaur."
  word = "Dino"
  
  !!(/dino/.match(word.downcase))
  OR
  advice.match("dino")
  
q8: Find the index of the first name that starts with "Be":
  flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)

a8:
  flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)
  flintstones.find_index { |name| name.start_with?("Be") }
  
q9/10: shorten each name to just 3 characters:
flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)

a9/10:
  flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)
  flintstones.map! { |name| name[0..2] }
  OR
  flintstones.map! { |name| name[0, 3] }