1. 
munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" }
}

munsters.select do |munster, details| 
  details['gender'] == 'male' 
end.values.inject(0) { |sum, details| sum += details['age'].to_i }

2.
munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}

def a_or_an(following_word)
  #if %w(a e i o u).any? { |vowels| following_word.start_with?(vowels) }
  if following_word.scan(/[aeiou]/)
    'an ' + following_word
  else
    'a ' + following_word
  end
end

munsters.each { |munster, details| puts "#{munster} is a #{details['age']} year old #{details['gender']}." }


3. 
  def tricky_method(a_string_param, an_array_param)
    a_string_param += "rutabaga"
    an_array_param << "rutabaga"
  end
  
  my_string = "pumpkins"
  my_array = ["pumpkins"]
  tricky_method(my_string, my_array)
  
  puts "My string looks like this now: #{my_string}"
  puts "My array looks like this now: #{my_array}"
  
>>>>>

  def tricky_method(a_string_param, an_array_param)
    a_string_param += "rutabaga"
    an_array_param << "rutabaga"
  end
  
  my_string = "pumpkins"
  my_array = ["pumpkins"]
  tricky_method(my_string, my_array)
  
  puts "My string looks like this now: #{my_string}"
  puts "My array looks like this now: #{my_array}"


4.
  sentence = "Humpty Dumpty sat on a wall."
  sentence.split(/\W/).reverse.join(' ') + '.'
  
  
5. The output of the following code is: 34
  answer = 42

  def mess_with_it(some_number)
    some_number += 8
  end
  
  new_answer = mess_with_it(answer)
  
  p answer - 8
  

6. The following code did update the original hash.

munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}

def mess_with_demographics(demo_hash)
  demo_hash.values.each do |family_member|
    family_member["age"] += 42
    family_member["gender"] = "other"
  end
end

mess_with_demographics(munsters)


7. The following will print 'paper', and return nil

def rps(fist1, fist2)
  if fist1 == "rock"
    (fist2 == "paper") ? "paper" : "rock"
  elsif fist1 == "paper"
    (fist2 == "scissors") ? "scissors" : "paper"
  else
    (fist2 == "rock") ? "rock" : "scissors"
  end
end

puts rps(rps(rps("rock", "paper"), rps("rock", "scissors")), "rock")


8. bar(foo) will produce: 'no'

  def foo(param = "no")
    "yes"
  end
  
  def bar(param = "no")
    param == "no" ? "yes" : "no"
  end

